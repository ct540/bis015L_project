ca_cnty_comp <- cnty_comp %>%
filter(state=="California")
ca_comp <- us_comp %>%
filter(name=="California")
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
library(svglite)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
library(svglite)
cnty_comp <- counties_sf()
cnty_comp <- counties_sf()
us_comp <- usa_sf()
library(tidyverse)
library(janitor)
library(here)
library(albersusa)
library(ggmap)
library(svglite)
disease <- readr::read_csv("Data/infectious-diseases-by-county-year-and-sex 2.csv")
disease
disease_tidy <- janitor::clean_names(disease)
names(disease_tidy)
disease_data <- disease_tidy %>%
select(disease, county, year, sex, cases, population)
disease_data
skimr::skim(disease_data)
dim(disease_data)
naniar::miss_var_summary(disease_data)
final_disease_data <- disease_data %>%
na.omit()
final_disease_data
anyNA(final_disease_data)
us_comp <- usa_sf()
cnty_comp <- counties_sf()
ca_comp <- us_comp %>%
filter(name=="California")
ca_comp <- us_comp %>%
filter(name=="California")
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)
us_comp <- usa_sf()
cnty_comp <- counties_sf()
ca_comp <- us_comp %>%
filter(name=="California")
ca_comp <- us_comp %>%
filter(name=="California")
ca_cnty_comp <- cnty_comp %>%
filter(state=="California")
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)
cali_map <- ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)
library(remotes)
library(tidyverse) # wrangling and plotting
library(cowplot) # plotting multiple panels
library(sf) # spatial anything
library(mapview) # interactive mapping
library(janitor) # cleaning names
library(tmap) # mapping
library(tmaptools)
library(OpenStreetMap) # adding base layers to tmaps
turkeys <- read_csv("https://raw.githubusercontent.com/ryanpeek/r_officehours/main/data/annual_turkey_data_by_state_USDA_1929-2020.csv")
#turkeys <- read_csv("data/annual_turkey_data_by_state_USDA_1929-2020.csv")
names(turkeys)
table(turkeys$`Data Item`)
turkey_trimmed <- turkeys %>%
janitor::clean_names() %>% # fix column names
select(year, state, state_ansi, data_item, value) %>%
# fix the value to be integer, and remove commas
mutate(value=as.integer(gsub(pattern = ",", replacement = "", value)))
# rm NAs
turkey_trimmed <- turkey_trimmed %>%
filter(!is.na(value))
names(turkey_trimmed)
# let's recode this data_item column using case_when()
table(turkey_trimmed$data_item)
turkey_trimmed <- turkey_trimmed %>%
mutate(prod_type=case_when(
data_item=="TURKEYS - PRODUCTION, MEASURED IN $" ~ "production_dollars",
grepl(pattern="HEAD", data_item) ~ "production_head",
grepl(pattern="LB", data_item) ~ "production_lbs"
))
table(turkey_trimmed$prod_type)
# save back out as a clean data file we can use:
save(turkey_trimmed, file = "data/turkey_trimmed_us_1929-2020.rda") # .RData
library(albersusa)
us_comp <- usa_sf() # get a composite of USA
cnty_comp <- counties_sf() # composite counties
# plot:
plot(us_comp$geometry, border = "black", lwd=1)
plot(cnty_comp$geometry, border="gray", lwd=0.2, add=TRUE)
# write to geopackage:
st_write(us_comp,dsn = "data_output/map_base_layers.gpkg", layer = "us_composite", delete_layer = TRUE)
# check layers?
st_layers("data_output/map_base_layers.gpkg")
# how to read in a layer from a geopackage
us_comp <- read_sf(dsn="data_output/map_base_layers.gpkg", layer="us_composite")
# join by state names
turkey_states <- left_join(turkey_trimmed, us_comp, by=c("state_ansi"="fips_state")) %>%
st_as_sf()
# use mapview to make an interactive map to check:
t2019 <- turkey_states %>%
filter(year==2019, prod_type=="production_dollars")
# make map
mapview(t2019, zcol="value")
library(tidyverse)
library(janitor)
library(here)
library(albersusa)
library(ggmap)
library(svglite)
library(shiny)
library(shinydashboard)
if (!require("tidyverse")) install.packages('tidyverse')
ui <- dashboardPage(
dashboardHeader(title = "Disease Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Disease", choices = c('Amebiasis', 'Anaplasmosis', 'Anthrax', 'Babesiosis', 'Botulism, Foodborne', 'Botulism, Other', 'Botulism, Wound', 'Brucellosis', 'Campylobacteriosis', 'Chikungunya Virus Infection', 'Cholera', 'Ciguatera Fish Poisoning', 'Coccidioidomycosis', 'Creutzfeldt-Jakob Disease and other Transmissible Spongiform Encephalopathies', 'Cryptosporidiosis', 'Cyclosporiasis', 'Cysticercosis or Taeniasis', 'Dengue', 'Domoic Acid Poisoning', 'Ehrlichiosis', 'Flavivirus Infection of Undetermined Species', 'Giardiasis', 'Hantavirus Infection', 'Hemolytic Uremic Syndrome', 'Hepatitis E, acute infection', 'Legionellosis', 'Leprosy', 'Leptospirosis', 'Listeriosis', 'Lyme Disease', 'Malaria', 'Paralytic Shellfish Poisoning', 'Paratyphoid Fever', 'Plague, human', 'Psittacosis', 'Q Fever', 'Rabies, human', 'Relapsing Fever', 'Salmonellosis', 'Scombroid Fish Poisoning', 'Shiga toxin-producing E. coli (STEC) with HUS', 'Shiga toxin-producing E. coli (STEC) without HUS', 'Shigellosis', 'Spotted Fever Rickettsiosis', 'Streptococcal Infection (cases in food and dairy workers)', 'Trichinosis', 'Tularemia', 'Typhoid Fever, case', 'Typhus Fever', 'Vibrio Infection (non-Cholera)', 'Yellow Fever', 'Yersiniosis', 'Zika Virus Infection'),
selected = "Amebiasis"),
hr(),
helpText("The data represent cases with an estimated illness onset date from 2001 through the last year indicated from California Confidential Morbidity Reports and/or Laboratory Reports")
),
box(title = "Disease Abundance ", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
final_disease_data %>%
ggplot(aes_string(x = "county")) + #?????
geom_bar()+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Disease Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Disease", choices = c('Amebiasis', 'Anaplasmosis', 'Anthrax', 'Babesiosis', 'Botulism, Foodborne', 'Botulism, Other', 'Botulism, Wound', 'Brucellosis', 'Campylobacteriosis', 'Chikungunya Virus Infection', 'Cholera', 'Ciguatera Fish Poisoning', 'Coccidioidomycosis', 'Creutzfeldt-Jakob Disease and other Transmissible Spongiform Encephalopathies', 'Cryptosporidiosis', 'Cyclosporiasis', 'Cysticercosis or Taeniasis', 'Dengue', 'Domoic Acid Poisoning', 'Ehrlichiosis', 'Flavivirus Infection of Undetermined Species', 'Giardiasis', 'Hantavirus Infection', 'Hemolytic Uremic Syndrome', 'Hepatitis E, acute infection', 'Legionellosis', 'Leprosy', 'Leptospirosis', 'Listeriosis', 'Lyme Disease', 'Malaria', 'Paralytic Shellfish Poisoning', 'Paratyphoid Fever', 'Plague, human', 'Psittacosis', 'Q Fever', 'Rabies, human', 'Relapsing Fever', 'Salmonellosis', 'Scombroid Fish Poisoning', 'Shiga toxin-producing E. coli (STEC) with HUS', 'Shiga toxin-producing E. coli (STEC) without HUS', 'Shigellosis', 'Spotted Fever Rickettsiosis', 'Streptococcal Infection (cases in food and dairy workers)', 'Trichinosis', 'Tularemia', 'Typhoid Fever, case', 'Typhus Fever', 'Vibrio Infection (non-Cholera)', 'Yellow Fever', 'Yersiniosis', 'Zika Virus Infection'),
selected = "Amebiasis"),
hr(),
helpText("The data represent cases with an estimated illness onset date from 2001 through the last year indicated from California Confidential Morbidity Reports and/or Laboratory Reports")
),
box(title = "Disease Abundance ", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
final_disease_data %>%
ggplot(aes_string(x = "county", y="cases")) + #?????
geom_col()+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Disease Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("y", "Select Disease", choices = c('Amebiasis', 'Anaplasmosis', 'Anthrax', 'Babesiosis', 'Botulism, Foodborne', 'Botulism, Other', 'Botulism, Wound', 'Brucellosis', 'Campylobacteriosis', 'Chikungunya Virus Infection', 'Cholera', 'Ciguatera Fish Poisoning', 'Coccidioidomycosis', 'Creutzfeldt-Jakob Disease and other Transmissible Spongiform Encephalopathies', 'Cryptosporidiosis', 'Cyclosporiasis', 'Cysticercosis or Taeniasis', 'Dengue', 'Domoic Acid Poisoning', 'Ehrlichiosis', 'Flavivirus Infection of Undetermined Species', 'Giardiasis', 'Hantavirus Infection', 'Hemolytic Uremic Syndrome', 'Hepatitis E, acute infection', 'Legionellosis', 'Leprosy', 'Leptospirosis', 'Listeriosis', 'Lyme Disease', 'Malaria', 'Paralytic Shellfish Poisoning', 'Paratyphoid Fever', 'Plague, human', 'Psittacosis', 'Q Fever', 'Rabies, human', 'Relapsing Fever', 'Salmonellosis', 'Scombroid Fish Poisoning', 'Shiga toxin-producing E. coli (STEC) with HUS', 'Shiga toxin-producing E. coli (STEC) without HUS', 'Shigellosis', 'Spotted Fever Rickettsiosis', 'Streptococcal Infection (cases in food and dairy workers)', 'Trichinosis', 'Tularemia', 'Typhoid Fever, case', 'Typhus Fever', 'Vibrio Infection (non-Cholera)', 'Yellow Fever', 'Yersiniosis', 'Zika Virus Infection'),
selected = "Amebiasis"),
hr(),
helpText("The data represent cases with an estimated illness onset date from 2001 through the last year indicated from California Confidential Morbidity Reports and/or Laboratory Reports")
),
box(title = "Disease Abundance ", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
final_disease_data %>%
ggplot(aes_string(x = "county", y="cases", fill = "sex")) + #?????
geom_col()+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
final_disease_data$cases=as.numeric(levels(final_disease_data$cases)))
final_disease_data$cases=as.numeric(levels(final_disease_data$cases))
final_disease_data$cases=as.numeric(as.character(cases))
final_disease_data$cases=as.numeric(as.character("cases"))
final_disease_data$cases=as.numeric(as.character("cases", na.rm=T))
